
#include <stdio.h>

#define NUM_INPUTS 2

// Function to update the weights based on the Hebbian learning rule
void updateWeights(float inputs[], float *weight)
{
    // Learning rate
    float learningRate = 0.1;

    // Update the weight using the Hebbian learning rule
    for (int i = 0; i < NUM_INPUTS; i++) {
        *weight += learningRate * inputs[i] * inputs[i];
    }
}

// Function to compute the output based on the current weights
float computeOutput(float inputs[], float weight)
{
    float output = 0.0;

    // Compute the weighted sum
    for (int i = 0; i < NUM_INPUTS; i++) {
        output += inputs[i] * weight;
    }

    return output;
}

int main()
{
    // Initialize inputs and weight
    float inputs[NUM_INPUTS] = {1.0, -1.0};  // Example inputs
    float weight = 0.0;  // Initial weight

    // Perform Hebbian learning for a few iterations
    for (int iteration = 0; iteration < 5; iteration++) {
        // Compute the output
        float output = computeOutput(inputs, weight);

        // Print the output
        printf("Output: %f\n", output);

        // Update the weights based on the Hebbian learning rule
        updateWeights(inputs, &weight);
    }

    return 0;
}
